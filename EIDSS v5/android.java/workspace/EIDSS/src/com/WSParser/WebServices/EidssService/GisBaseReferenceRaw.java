//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version Beta 1.2
//
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Beta Version
//
package com.WSParser.WebServices.EidssService;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import android.content.ContentValues;

public class GisBaseReferenceRaw implements KvmSerializable {

    public String NAMESPACE =" http://bv.com/eidss";
    public long idfsBaseReference;
    public long idfsReferenceType;
    public long idfsCountry;
    public long idfsRegion;
    public long idfsRayon;
    public String strDefault;
    
    public ContentValues ContentValues()
    {
    	ContentValues ret = new ContentValues();
        ret.put("idfsBaseReference", idfsBaseReference);
        ret.put("idfsReferenceType", idfsReferenceType);
        ret.put("idfsCountry", idfsCountry);
        ret.put("idfsRegion", idfsRegion);
        ret.put("idfsRayon", idfsRayon);
        ret.put("strDefault", strDefault);
        return ret;
    }
    
    public GisBaseReferenceRaw(){}
    
    public GisBaseReferenceRaw(SoapObject soapObject){
    
        if (soapObject.hasProperty("idfsBaseReference"))
        {
            Object obj = soapObject.getProperty("idfsBaseReference");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j16 =(SoapPrimitive) soapObject.getProperty("idfsBaseReference");
                idfsBaseReference = Long.parseLong(j16.toString());
            }
        }
        if (soapObject.hasProperty("idfsReferenceType"))
        {
            Object obj = soapObject.getProperty("idfsReferenceType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j17 =(SoapPrimitive) soapObject.getProperty("idfsReferenceType");
                idfsReferenceType = Long.parseLong(j17.toString());
            }
        }
        if (soapObject.hasProperty("idfsCountry"))
        {
            Object obj = soapObject.getProperty("idfsCountry");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j18 =(SoapPrimitive) soapObject.getProperty("idfsCountry");
                idfsCountry = Long.parseLong(j18.toString());
            }
        }
        if (soapObject.hasProperty("idfsRegion"))
        {
            Object obj = soapObject.getProperty("idfsRegion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j19 =(SoapPrimitive) soapObject.getProperty("idfsRegion");
                idfsRegion = Long.parseLong(j19.toString());
            }
        }
        if (soapObject.hasProperty("idfsRayon"))
        {
            Object obj = soapObject.getProperty("idfsRayon");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j20 =(SoapPrimitive) soapObject.getProperty("idfsRayon");
                idfsRayon = Long.parseLong(j20.toString());
            }
        }
        if (soapObject.hasProperty("strDefault"))
        {
            Object obj = soapObject.getProperty("strDefault");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j21 =(SoapPrimitive) soapObject.getProperty("strDefault");
                strDefault = j21.toString();
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
    switch(arg0){
        case 0:
            return idfsBaseReference;
        case 1:
            return idfsReferenceType;
        case 2:
            return idfsCountry;
        case 3:
            return idfsRegion;
        case 4:
            return idfsRayon;
        case 5:
            return strDefault;
    }
    return null;
    }
    @Override
    public int getPropertyCount() {
        return 6;
    }
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
    switch(index){
        case 0:
            info.type = Long.class;
            info.name = "idfsBaseReference";
            break;
        case 1:
            info.type = Long.class;
            info.name = "idfsReferenceType";
            break;
        case 2:
            info.type = Long.class;
            info.name = "idfsCountry";
            break;
        case 3:
            info.type = Long.class;
            info.name = "idfsRegion";
            break;
        case 4:
            info.type = Long.class;
            info.name = "idfsRayon";
            break;
        case 5:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "strDefault";
            break;
    }
    }
    @Override
    public void setProperty(int index, Object value) {
    switch(index){
        case 0:
        idfsBaseReference = Long.parseLong(value.toString()) ;
        break;
        case 1:
        idfsReferenceType = Long.parseLong(value.toString()) ;
        break;
        case 2:
        idfsCountry = Long.parseLong(value.toString()) ;
        break;
        case 3:
        idfsRegion = Long.parseLong(value.toString()) ;
        break;
        case 4:
        idfsRayon = Long.parseLong(value.toString()) ;
        break;
        case 5:
        strDefault = value.toString() ;
        break;
}
}
}
