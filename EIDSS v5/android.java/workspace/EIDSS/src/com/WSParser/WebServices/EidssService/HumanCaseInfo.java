//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version Beta 1.2
//
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Beta Version
//
package com.WSParser.WebServices.EidssService;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import com.WSParser.WebServices.EidssService.BaseReferenceItem;
import com.WSParser.WebServices.EidssService.AddressInfo;

public class HumanCaseInfo implements KvmSerializable {

    public String NAMESPACE =" http://bv.com/eidss";
    public String offlineCaseID;
    public long id;
    public String caseID;
    public String localID;
    public String localIdentifier;
    public BaseReferenceItem tentativeDiagnosis;
    public BaseReferenceItem finalDiagnosis;
    public String firstName;
    public String middleName;
    public String lastName;
    public BaseReferenceItem patientAgeType;
    public BaseReferenceItem patientGender;
    public BaseReferenceItem caseStatus;
    public BaseReferenceItem relatedToOutbreak;
    public BaseReferenceItem currentLocation;
    public BaseReferenceItem hospitalization;
    public BaseReferenceItem caseClassification;
    public BaseReferenceItem finalCaseStatus;
    public BaseReferenceItem patientState;
    public BaseReferenceItem citizenship;
    public String additionalComment;
    public BaseReferenceItem outcome;
    public AddressInfo currentResidence;
    public AddressInfo employerAddress;
    public String employerName;
    public String currentLocationName;
    public BaseReferenceItem notificationSentBy;
    public BaseReferenceItem notificationSentByPerson;
    public String notificationSentByFirstName;
    public String notificationSentByPatronymicName;
    public String notificationSentByLastName;
    public BaseReferenceItem notificationReceivedBy;
    public String notificationReceivedByFirstName;
    public String notificationReceivedByPatronymicName;
    public String notificationReceivedByLastName;
    public String phoneNumber;
    public String lastErrorDescription;
    public boolean markedToDelete;
    public String notificationDate;
    public String tentativeDiagnosisDate;
    public String dateOfBirth;
    public String onsetDate;
    public int patientAge;

    public Date getNotificationDate()
    {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ", Locale.US);
        try {
			return format.parse(notificationDate.replace('T', ' '));
		} catch (ParseException e) {
			e.printStackTrace();
		}
        return null;
    }
    public void setNotificationDate(Date value)
    {
    	if (value == null)
    		notificationDate = null;
    	else{
	        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
	        notificationDate = format.format(value).replace(' ', 'T');
    	}
    }
    public Date getTentativeDiagnosisDate()
    {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ", Locale.US);
        try {
			return format.parse(tentativeDiagnosisDate.replace('T', ' '));
		} catch (ParseException e) {
			e.printStackTrace();
		}
        return null;
    }
    public void setTentativeDiagnosisDate(Date value)
    {
    	if (value == null)
    		tentativeDiagnosisDate = null;
    	else{
	        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
	        tentativeDiagnosisDate = format.format(value).replace(' ', 'T');
    	}
    }
    public Date getDateOfBirth()
    {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ", Locale.US);
        try {
			return format.parse(dateOfBirth.replace('T', ' '));
		} catch (ParseException e) {
			e.printStackTrace();
		}
        return null;
    }
    public void setDateOfBirth(Date value)
    {
    	if (value == null)
    		dateOfBirth = null;
    	else{
	        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
	        dateOfBirth = format.format(value).replace(' ', 'T');
    	}
    }
    public Date getOnsetDate()
    {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ", Locale.US);
        try {
			return format.parse(onsetDate.replace('T', ' '));
		} catch (ParseException e) {
			e.printStackTrace();
		}
        return null;
    }
    public void setOnsetDate(Date value)
    {
    	if (value == null)
    		onsetDate = null;
    	else{
	        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
	        onsetDate = format.format(value).replace(' ', 'T');
    	}
    }
    
    public HumanCaseInfo(){}
    
    public HumanCaseInfo(SoapObject soapObject){
    
        if (soapObject.hasProperty("OfflineCaseID"))
        {
            Object obj = soapObject.getProperty("OfflineCaseID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j69 =(SoapPrimitive) soapObject.getProperty("OfflineCaseID");
                offlineCaseID = j69.toString();
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j70 =(SoapPrimitive) soapObject.getProperty("Id");
                id = Long.parseLong(j70.toString());
            }
        }
        if (soapObject.hasProperty("CaseID"))
        {
            Object obj = soapObject.getProperty("CaseID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j71 =(SoapPrimitive) soapObject.getProperty("CaseID");
                caseID = j71.toString();
            }
        }
        if (soapObject.hasProperty("LocalID"))
        {
            Object obj = soapObject.getProperty("LocalID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j72 =(SoapPrimitive) soapObject.getProperty("LocalID");
                localID = j72.toString();
            }
        }
        if (soapObject.hasProperty("LocalIdentifier"))
        {
            Object obj = soapObject.getProperty("LocalIdentifier");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j73 =(SoapPrimitive) soapObject.getProperty("LocalIdentifier");
                localIdentifier = j73.toString();
            }
        }
        if (soapObject.hasProperty("TentativeDiagnosis"))
        {
            SoapObject j74 = (SoapObject)soapObject.getProperty("TentativeDiagnosis");
            tentativeDiagnosis =  new BaseReferenceItem (j74);
            
        }
        if (soapObject.hasProperty("FinalDiagnosis"))
        {
            SoapObject j75 = (SoapObject)soapObject.getProperty("FinalDiagnosis");
            finalDiagnosis =  new BaseReferenceItem (j75);
            
        }
        if (soapObject.hasProperty("FirstName"))
        {
            Object obj = soapObject.getProperty("FirstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j76 =(SoapPrimitive) soapObject.getProperty("FirstName");
                firstName = j76.toString();
            }
        }
        if (soapObject.hasProperty("MiddleName"))
        {
            Object obj = soapObject.getProperty("MiddleName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j77 =(SoapPrimitive) soapObject.getProperty("MiddleName");
                middleName = j77.toString();
            }
        }
        if (soapObject.hasProperty("LastName"))
        {
            Object obj = soapObject.getProperty("LastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j78 =(SoapPrimitive) soapObject.getProperty("LastName");
                lastName = j78.toString();
            }
        }
        if (soapObject.hasProperty("PatientAgeType"))
        {
            SoapObject j79 = (SoapObject)soapObject.getProperty("PatientAgeType");
            patientAgeType =  new BaseReferenceItem (j79);
            
        }
        if (soapObject.hasProperty("PatientGender"))
        {
            SoapObject j80 = (SoapObject)soapObject.getProperty("PatientGender");
            patientGender =  new BaseReferenceItem (j80);
            
        }
        if (soapObject.hasProperty("CaseStatus"))
        {
            SoapObject j81 = (SoapObject)soapObject.getProperty("CaseStatus");
            caseStatus =  new BaseReferenceItem (j81);
            
        }
        if (soapObject.hasProperty("RelatedToOutbreak"))
        {
            SoapObject j82 = (SoapObject)soapObject.getProperty("RelatedToOutbreak");
            relatedToOutbreak =  new BaseReferenceItem (j82);
            
        }
        if (soapObject.hasProperty("CurrentLocation"))
        {
            SoapObject j83 = (SoapObject)soapObject.getProperty("CurrentLocation");
            currentLocation =  new BaseReferenceItem (j83);
            
        }
        if (soapObject.hasProperty("Hospitalization"))
        {
            SoapObject j84 = (SoapObject)soapObject.getProperty("Hospitalization");
            hospitalization =  new BaseReferenceItem (j84);
            
        }
        if (soapObject.hasProperty("CaseClassification"))
        {
            SoapObject j85 = (SoapObject)soapObject.getProperty("CaseClassification");
            caseClassification =  new BaseReferenceItem (j85);
            
        }
        if (soapObject.hasProperty("FinalCaseStatus"))
        {
            SoapObject j86 = (SoapObject)soapObject.getProperty("FinalCaseStatus");
            finalCaseStatus =  new BaseReferenceItem (j86);
            
        }
        if (soapObject.hasProperty("PatientState"))
        {
            SoapObject j87 = (SoapObject)soapObject.getProperty("PatientState");
            patientState =  new BaseReferenceItem (j87);
            
        }
        if (soapObject.hasProperty("Citizenship"))
        {
            SoapObject j88 = (SoapObject)soapObject.getProperty("Citizenship");
            citizenship =  new BaseReferenceItem (j88);
            
        }
        if (soapObject.hasProperty("AdditionalComment"))
        {
            Object obj = soapObject.getProperty("AdditionalComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j89 =(SoapPrimitive) soapObject.getProperty("AdditionalComment");
                additionalComment = j89.toString();
            }
        }
        if (soapObject.hasProperty("Outcome"))
        {
            SoapObject j90 = (SoapObject)soapObject.getProperty("Outcome");
            outcome =  new BaseReferenceItem (j90);
            
        }
        if (soapObject.hasProperty("CurrentResidence"))
        {
            SoapObject j91 = (SoapObject)soapObject.getProperty("CurrentResidence");
            currentResidence =  new AddressInfo (j91);
            
        }
        if (soapObject.hasProperty("EmployerAddress"))
        {
            SoapObject j92 = (SoapObject)soapObject.getProperty("EmployerAddress");
            employerAddress =  new AddressInfo (j92);
            
        }
        if (soapObject.hasProperty("EmployerName"))
        {
            Object obj = soapObject.getProperty("EmployerName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j93 =(SoapPrimitive) soapObject.getProperty("EmployerName");
                employerName = j93.toString();
            }
        }
        if (soapObject.hasProperty("CurrentLocationName"))
        {
            Object obj = soapObject.getProperty("CurrentLocationName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j94 =(SoapPrimitive) soapObject.getProperty("CurrentLocationName");
                currentLocationName = j94.toString();
            }
        }
        if (soapObject.hasProperty("NotificationSentBy"))
        {
            SoapObject j95 = (SoapObject)soapObject.getProperty("NotificationSentBy");
            notificationSentBy =  new BaseReferenceItem (j95);
            
        }
        if (soapObject.hasProperty("NotificationSentByPerson"))
        {
            SoapObject j96 = (SoapObject)soapObject.getProperty("NotificationSentByPerson");
            notificationSentByPerson =  new BaseReferenceItem (j96);
            
        }
        if (soapObject.hasProperty("NotificationSentByFirstName"))
        {
            Object obj = soapObject.getProperty("NotificationSentByFirstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j97 =(SoapPrimitive) soapObject.getProperty("NotificationSentByFirstName");
                notificationSentByFirstName = j97.toString();
            }
        }
        if (soapObject.hasProperty("NotificationSentByPatronymicName"))
        {
            Object obj = soapObject.getProperty("NotificationSentByPatronymicName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j98 =(SoapPrimitive) soapObject.getProperty("NotificationSentByPatronymicName");
                notificationSentByPatronymicName = j98.toString();
            }
        }
        if (soapObject.hasProperty("NotificationSentByLastName"))
        {
            Object obj = soapObject.getProperty("NotificationSentByLastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j99 =(SoapPrimitive) soapObject.getProperty("NotificationSentByLastName");
                notificationSentByLastName = j99.toString();
            }
        }
        if (soapObject.hasProperty("NotificationReceivedBy"))
        {
            SoapObject j100 = (SoapObject)soapObject.getProperty("NotificationReceivedBy");
            notificationReceivedBy =  new BaseReferenceItem (j100);
            
        }
        if (soapObject.hasProperty("NotificationReceivedByFirstName"))
        {
            Object obj = soapObject.getProperty("NotificationReceivedByFirstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j101 =(SoapPrimitive) soapObject.getProperty("NotificationReceivedByFirstName");
                notificationReceivedByFirstName = j101.toString();
            }
        }
        if (soapObject.hasProperty("NotificationReceivedByPatronymicName"))
        {
            Object obj = soapObject.getProperty("NotificationReceivedByPatronymicName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j102 =(SoapPrimitive) soapObject.getProperty("NotificationReceivedByPatronymicName");
                notificationReceivedByPatronymicName = j102.toString();
            }
        }
        if (soapObject.hasProperty("NotificationReceivedByLastName"))
        {
            Object obj = soapObject.getProperty("NotificationReceivedByLastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j103 =(SoapPrimitive) soapObject.getProperty("NotificationReceivedByLastName");
                notificationReceivedByLastName = j103.toString();
            }
        }
        if (soapObject.hasProperty("PhoneNumber"))
        {
            Object obj = soapObject.getProperty("PhoneNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j104 =(SoapPrimitive) soapObject.getProperty("PhoneNumber");
                phoneNumber = j104.toString();
            }
        }
        if (soapObject.hasProperty("LastErrorDescription"))
        {
            Object obj = soapObject.getProperty("LastErrorDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j105 =(SoapPrimitive) soapObject.getProperty("LastErrorDescription");
                lastErrorDescription = j105.toString();
            }
        }
        if (soapObject.hasProperty("MarkedToDelete"))
        {
            Object obj = soapObject.getProperty("MarkedToDelete");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j106 =(SoapPrimitive) soapObject.getProperty("MarkedToDelete");
                markedToDelete = Boolean.parseBoolean(j106.toString());
            }
        }
        if (soapObject.hasProperty("NotificationDate"))
        {
            Object obj = soapObject.getProperty("NotificationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j106 =(SoapPrimitive) soapObject.getProperty("NotificationDate");
                notificationDate = j106.toString();
            }
        }
        if (soapObject.hasProperty("TentativeDiagnosisDate"))
        {
            Object obj = soapObject.getProperty("TentativeDiagnosisDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j106 =(SoapPrimitive) soapObject.getProperty("TentativeDiagnosisDate");
               	tentativeDiagnosisDate = j106.toString();
            }
        }
        if (soapObject.hasProperty("DateOfBirth"))
        {
            Object obj = soapObject.getProperty("DateOfBirth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j106 =(SoapPrimitive) soapObject.getProperty("DateOfBirth");
               	dateOfBirth = j106.toString();
            }
        }
        if (soapObject.hasProperty("OnsetDate"))
        {
            Object obj = soapObject.getProperty("OnsetDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j106 =(SoapPrimitive) soapObject.getProperty("OnsetDate");
               	onsetDate = j106.toString();
            }
        }
        if (soapObject.hasProperty("PatientAge"))
        {
            Object obj = soapObject.getProperty("PatientAge");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j70 =(SoapPrimitive) soapObject.getProperty("PatientAge");
              	patientAge = Integer.parseInt(j70.toString()) ;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
    switch(arg0){
        case 0:
            return offlineCaseID;
        case 1:
            return id;
        case 2:
            return caseID;
        case 3:
            return localID;
        case 4:
            return localIdentifier;
        case 5:
            return tentativeDiagnosis;
        case 6:
            return finalDiagnosis;
        case 7:
            return firstName;
        case 8:
            return middleName;
        case 9:
            return lastName;
        case 10:
            return patientAgeType;
        case 11:
            return patientGender;
        case 12:
            return caseStatus;
        case 13:
            return relatedToOutbreak;
        case 14:
            return currentLocation;
        case 15:
            return hospitalization;
        case 16:
            return caseClassification;
        case 17:
            return finalCaseStatus;
        case 18:
            return patientState;
        case 19:
            return citizenship;
        case 20:
            return additionalComment;
        case 21:
            return outcome;
        case 22:
            return currentResidence;
        case 23:
            return employerAddress;
        case 24:
            return employerName;
        case 25:
            return currentLocationName;
        case 26:
            return notificationSentBy;
        case 27:
            return notificationSentByPerson;
        case 28:
            return notificationSentByFirstName;
        case 29:
            return notificationSentByPatronymicName;
        case 30:
            return notificationSentByLastName;
        case 31:
            return notificationReceivedBy;
        case 32:
            return notificationReceivedByFirstName;
        case 33:
            return notificationReceivedByPatronymicName;
        case 34:
            return notificationReceivedByLastName;
        case 35:
            return phoneNumber;
        case 36:
            return lastErrorDescription;
        case 37:
            return markedToDelete;
        case 38:
            return notificationDate;
        case 39:
            return tentativeDiagnosisDate;
        case 40:
            return dateOfBirth;
        case 41:
            return onsetDate;
        case 42:
            return patientAge;
    }
    return null;
    }
    @Override
    public int getPropertyCount() {
        return 43;
    }
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
    switch(index){
        case 0:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "OfflineCaseID";
            break;
        case 1:
            info.type = Long.class;
            info.name = "Id";
            break;
        case 2:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "CaseID";
            break;
        case 3:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "LocalID";
            break;
        case 4:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "LocalIdentifier";
            break;
        case 5:
            info.type = BaseReferenceItem.class;
            info.name = "TentativeDiagnosis";
            break;
        case 6:
            info.type = BaseReferenceItem.class;
            info.name = "FinalDiagnosis";
            break;
        case 7:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "FirstName";
            break;
        case 8:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "MiddleName";
            break;
        case 9:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "LastName";
            break;
        case 10:
            info.type = BaseReferenceItem.class;
            info.name = "PatientAgeType";
            break;
        case 11:
            info.type = BaseReferenceItem.class;
            info.name = "PatientGender";
            break;
        case 12:
            info.type = BaseReferenceItem.class;
            info.name = "CaseStatus";
            break;
        case 13:
            info.type = BaseReferenceItem.class;
            info.name = "RelatedToOutbreak";
            break;
        case 14:
            info.type = BaseReferenceItem.class;
            info.name = "CurrentLocation";
            break;
        case 15:
            info.type = BaseReferenceItem.class;
            info.name = "Hospitalization";
            break;
        case 16:
            info.type = BaseReferenceItem.class;
            info.name = "CaseClassification";
            break;
        case 17:
            info.type = BaseReferenceItem.class;
            info.name = "FinalCaseStatus";
            break;
        case 18:
            info.type = BaseReferenceItem.class;
            info.name = "PatientState";
            break;
        case 19:
            info.type = BaseReferenceItem.class;
            info.name = "Citizenship";
            break;
        case 20:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "AdditionalComment";
            break;
        case 21:
            info.type = BaseReferenceItem.class;
            info.name = "Outcome";
            break;
        case 22:
            info.type = AddressInfo.class;
            info.name = "CurrentResidence";
            break;
        case 23:
            info.type = AddressInfo.class;
            info.name = "EmployerAddress";
            break;
        case 24:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "EmployerName";
            break;
        case 25:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "CurrentLocationName";
            break;
        case 26:
            info.type = BaseReferenceItem.class;
            info.name = "NotificationSentBy";
            break;
        case 27:
            info.type = BaseReferenceItem.class;
            info.name = "NotificationSentByPerson";
            break;
        case 28:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationSentByFirstName";
            break;
        case 29:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationSentByPatronymicName";
            break;
        case 30:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationSentByLastName";
            break;
        case 31:
            info.type = BaseReferenceItem.class;
            info.name = "NotificationReceivedBy";
            break;
        case 32:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationReceivedByFirstName";
            break;
        case 33:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationReceivedByPatronymicName";
            break;
        case 34:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationReceivedByLastName";
            break;
        case 35:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "PhoneNumber";
            break;
        case 36:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "LastErrorDescription";
            break;
        case 37:
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "MarkedToDelete";
            break;
        case 38:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "NotificationDate";
            break;
        case 39:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "TentativeDiagnosisDate";
            break;
        case 40:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "DateOfBirth";
            break;
        case 41:
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "OnsetDate";
            break;
        case 42:
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "PatientAge";
            break;
    }
    }
    @Override
    public void setProperty(int index, Object value) {
    switch(index){
        case 0:
        offlineCaseID = value.toString() ;
        break;
        case 1:
        id = Long.parseLong(value.toString()) ;
        break;
        case 2:
        caseID = value.toString() ;
        break;
        case 3:
        localID = value.toString() ;
        break;
        case 4:
        localIdentifier = value.toString() ;
        break;
        case 5:
        tentativeDiagnosis = (BaseReferenceItem)value;
        break;
        case 6:
        finalDiagnosis = (BaseReferenceItem)value;
        break;
        case 7:
        firstName = value.toString() ;
        break;
        case 8:
        middleName = value.toString() ;
        break;
        case 9:
        lastName = value.toString() ;
        break;
        case 10:
        patientAgeType = (BaseReferenceItem)value;
        break;
        case 11:
        patientGender = (BaseReferenceItem)value;
        break;
        case 12:
        caseStatus = (BaseReferenceItem)value;
        break;
        case 13:
        relatedToOutbreak = (BaseReferenceItem)value;
        break;
        case 14:
        currentLocation = (BaseReferenceItem)value;
        break;
        case 15:
        hospitalization = (BaseReferenceItem)value;
        break;
        case 16:
        caseClassification = (BaseReferenceItem)value;
        break;
        case 17:
        finalCaseStatus = (BaseReferenceItem)value;
        break;
        case 18:
        patientState = (BaseReferenceItem)value;
        break;
        case 19:
        citizenship = (BaseReferenceItem)value;
        break;
        case 20:
        additionalComment = value.toString() ;
        break;
        case 21:
        outcome = (BaseReferenceItem)value;
        break;
        case 22:
        currentResidence = (AddressInfo)value;
        break;
        case 23:
        employerAddress = (AddressInfo)value;
        break;
        case 24:
        employerName = value.toString() ;
        break;
        case 25:
        currentLocationName = value.toString() ;
        break;
        case 26:
        notificationSentBy = (BaseReferenceItem)value;
        break;
        case 27:
        notificationSentByPerson = (BaseReferenceItem)value;
        break;
        case 28:
        notificationSentByFirstName = value.toString() ;
        break;
        case 29:
        notificationSentByPatronymicName = value.toString() ;
        break;
        case 30:
        notificationSentByLastName = value.toString() ;
        break;
        case 31:
        notificationReceivedBy = (BaseReferenceItem)value;
        break;
        case 32:
        notificationReceivedByFirstName = value.toString() ;
        break;
        case 33:
        notificationReceivedByPatronymicName = value.toString() ;
        break;
        case 34:
        notificationReceivedByLastName = value.toString() ;
        break;
        case 35:
        phoneNumber = value.toString() ;
        break;
        case 36:
        lastErrorDescription = value.toString() ;
        break;
        case 37:
        markedToDelete = Boolean.parseBoolean(value.toString()) ;
        break;
        case 38:
		notificationDate = value.toString() ;
        break;
        case 39:
      	tentativeDiagnosisDate = value.toString() ;
        break;
        case 40:
        dateOfBirth = value.toString() ;
        break;
        case 41:
        onsetDate = value.toString() ;
        break;
        case 42:
      	patientAge = Integer.parseInt(value.toString()) ;
        break;
}
}
}
