@model bv.model.Model.Core.SearchPanelMetaItem           

@using eidss.webclient.Utils;
@functions
{

    HtmlString InsertAdjavantHiddens()
    {
        return new HtmlString(String.Format(
            "<input type='hidden' id='Lookup_{0}SlaveName' value='Lookup_{1}'/><input type='hidden' id='Lookup_{0}ParameterString' value='valueFieldName={1}&parameterName={0}&parameterValue=*value*'/>",
            Model.Name,
            Model.Dependent
            ));
    }

    enum CBoxEditorType
    {
        Master,
        Dependant,
        Normal
    }

    CBoxEditorType GetCurrentType()
    {
        if (!String.IsNullOrWhiteSpace(Model.Dependent))
            return CBoxEditorType.Master;
        if (ViewData["IsDependant"] != null)
            if ((bool)ViewData["IsDependant"])
                return CBoxEditorType.Dependant;
        return CBoxEditorType.Normal;
    }

    IEnumerable<SelectListItem> GetOperators(bv.model.Model.Core.EditorType type)
    {
        switch (type)
        {
            case bv.model.Model.Core.EditorType.Text:
                return new List<SelectListItem> {
                    new SelectListItem { Value = "=", Text = "="},
                    new SelectListItem { Value = "LIKE", Text = "LIKE" },
                    new SelectListItem { Value = "<>", Text = "<>" } 
                    };
            case bv.model.Model.Core.EditorType.Lookup:
                return new List<SelectListItem>
                {
                    new SelectListItem{ Value = "=", Text = "=" },
                    new SelectListItem{ Value = "<>", Text = "<>" }
                };
            default:
                return new List<SelectListItem> 
                {
                    new SelectListItem{ Value = "=", Text = "=" },
                    new SelectListItem{ Value = "<>", Text = "<>" },
                    new SelectListItem{ Value = ">", Text = ">" },
                    new SelectListItem{ Value = "<", Text = "<" },
                    new SelectListItem{ Value = ">=", Text = ">=" },
                    new SelectListItem{ Value = "<=", Text = "<=" }
                };
        }
    }

    String GetControlName(string baseName, string intervalPart = "")
    {
        if (Model.Location == bv.model.Model.Core.SearchPanelLocation.Combobox)
        {
            if (!baseName.StartsWith("CBox"))
                baseName = String.Format("CBox.Value");

            return String.Format("{0}.{1}", baseName, ViewData["ObjNameIndex"]);
        }
        else
        {
            if (intervalPart.Length > 0)
                intervalPart += ".";
            return String.Format("{0}.{1}{2}", baseName, intervalPart, Model.Name.Replace(" ", ""));
        }
    }

    IEnumerable<SelectListItem> GetSource()
    {
        //if (ViewData["LookupList"] == null)
        //    return new List<SelectListItem>();

        //var result = (IEnumerable<SelectListItem>)ViewData["LookupList"];

        //if (ViewData["Value"] == null)
        //    return result;

        //result.Where(x => x.Value.Equals(ViewData["Value"].ToString(), StringComparison.InvariantCultureIgnoreCase)).First().Selected = true;
        
        return ViewData["LookupList"] as SelectList;        
    }
    
    int GetSelectedIndex()
    {
        var selectlist = ViewData["LookupList"] as List<SelectListItem>;
        int index = -1;
        
        if (index < 0 && selectlist != null && selectlist != null && ViewData["Value"] != null)
        {
            string str = ViewData["Value"].ToString();
            if (!string.IsNullOrEmpty(str))
            {
                for (int i = 0; i < selectlist.Count; i++)
                {
                    if (selectlist[i].Value == str)
                    {
                        index = i;
                        break;
                    }
                }
            }
        }
        return index;
    }
}
 
@if (Model.EditorType == bv.model.Model.Core.EditorType.Date && Model.IsRange && Model.IsRangeDefDates)
{
    <a href="#" onclick='FillStandardRange("month", "@GetControlName("Date", "From").Replace(".", "_")", "@GetControlName("Date", "To").Replace(".", "_")");'>@Translator.GetMessageString("this month")</a>
    <a href="#" onclick='FillStandardRange("quarter", "@GetControlName("Date", "From").Replace(".", "_")", "@GetControlName("Date", "To").Replace(".", "_")");'>@Translator.GetMessageString("this quarter")</a>            
    <a href="#" onclick='FillStandardRange("year", "@GetControlName("Date", "From").Replace(".", "_")", "@GetControlName("Date", "To").Replace(".", "_")");'>@Translator.GetMessageString("this year")</a>
    @SearchPanelHelper.CloseTableCell();
}

@if (Model.Location == bv.model.Model.Core.SearchPanelLocation.Combobox)
{
    @(Html.Telerik().ComboBox()
        .Name(GetControlName("CBox.Operand"))
        .BindTo(GetOperators(Model.EditorType))
        .HtmlAttributes(new { @class = "spOperand" })
        )
    <text>&nbsp;</text>
}
else
{
    <label class="spLabel">@Translator.GetString(Model.LabelId.Replace("_LblId", ""))</label>               
}
@switch (Model.EditorType)
{
    case bv.model.Model.Core.EditorType.Flag:
            @(Html.CheckBox(GetControlName("Flag"), (ViewData["Value"] == null) ? false : Convert.ToBoolean(ViewData["Value"])))
        break;
    case bv.model.Model.Core.EditorType.Date:
        if (Model.IsRange)
        {
            <div class="searchEditor">
                &nbsp;@Translator.GetMessageString("lblFrom")&nbsp;
                @(Html.Telerik().DatePicker()
                    .Name(GetControlName("Date", "From"))
                    .Value(ViewData["ValueFrom"] as DateTime?)
                    .HtmlAttributes(Model.IsMandatory ? new { @class = "spDate requiredField" } : new { @class = "spDate" })
                    .Enable(!(bool)ViewData["IsHiddenPersonalData"]))                    
                &nbsp;@Translator.GetMessageString("lblTo")&nbsp;
                @(Html.Telerik().DatePicker()
                    .Name(GetControlName("Date", "To"))
                    .Value(ViewData["ValueTo"] as DateTime?)
                    .HtmlAttributes(Model.IsMandatory ? new { @class = "spDate requiredField" } : new { @class = "spDate" })
                    .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
            </div>
            if (Model.IsMandatory)
            {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("Date", "From").Replace(".", "_"))' value='@ViewData["DefaultValueFrom"]' />
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("Date", "To").Replace(".", "_"))' value='@ViewData["DefaultValueTo"]' />
            }
        }
        else
        {
                 @(Html.Telerik().DatePicker()
                    .Name(GetControlName("Date"))
                  .HtmlAttributes(Model.IsMandatory ? new { @class = "spDateSingle requiredField" } : new { @class = "spDateSingle" })
                    .Value(ViewData["Value"] as DateTime?)
                   .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
    
      if (Model.IsMandatory)
            {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("Date").Replace(".", "_"))' value='@ViewData["DefaultValue"]' />                
            }
        }
        break;
    case bv.model.Model.Core.EditorType.Datetime:
        if (Model.IsRange)
        {
            <div class="searchEditor">
                &nbsp;@Translator.GetMessageString("lblFrom")&nbsp;
                @(Html.Telerik().DateTimePicker()
                    .Name(GetControlName("DateTime", "From"))
                    .Value(ViewData["ValueFrom"] as DateTime?)
                    .HtmlAttributes(Model.IsMandatory ? new { @class = "spDate requiredField" } : new { @class = "spDate" })
                    .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
                &nbsp;@Translator.GetMessageString("lblTo")&nbsp;
                @(Html.Telerik().DateTimePicker()
                    .Name(GetControlName("DateTime", "To"))
                    .Value(ViewData["ValueTo"] as DateTime?)
                    .HtmlAttributes(Model.IsMandatory ? new { @class = "spDate requiredField" } : new { @class = "spDate" })
                    .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
            </div>
            if (Model.IsMandatory)
            {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("DateTime", "From").Replace(".", "_"))' value='@ViewData["DefaultValueFrom"]' />
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("DateTime", "To").Replace(".", "_"))' value="@ViewData["DefaultValueTo"]" />
            }
        }
        else
        {
            @(Html.Telerik().DateTimePicker()
                .Name(GetControlName("DateTime"))
                .Value(ViewData["Value"] as DateTime?)
                .HtmlAttributes(Model.IsMandatory ? new { @class = "spDateSingle requiredField" } : new { @class = "spDateSingle" })
                .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
            if (Model.IsMandatory)
            {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("DateTime").Replace(".", "_"))' value='@ViewData["DefaultValue"]' />                
            }
        }
        break;
    case bv.model.Model.Core.EditorType.Numeric:
        if (Model.IsRange)
        {
            <div class="searchEditor">                
                &nbsp;@Translator.GetMessageString("lblFrom")&nbsp;
                @(Html.Telerik().IntegerTextBox()
                    .Name(GetControlName("Int", "From"))
                    .InputHtmlAttributes(Model.IsMandatory ? new { @class = "spNumeric requiredField" } : new { @class = "spNumeric" })
                    .Value(ViewData["Value"] as int?)
                    .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
                &nbsp;@Translator.GetMessageString("lblTo")&nbsp;
                @(Html.Telerik().IntegerTextBox()
                    .Name(GetControlName("Int", "To"))
                    .InputHtmlAttributes(Model.IsMandatory ? new { @class = "spNumeric requiredField" } : new { @class = "spNumeric" })
                    .Value(ViewData["Value"] as int?)
                    .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
            </div>
        }
        else
        {
            @(Html.Telerik().IntegerTextBox()
                .Name(GetControlName("Int"))
                .InputHtmlAttributes(Model.IsMandatory ? new { @class = "spNumeric requiredField" } : new { @class = "spNumeric" })
                .Value(ViewData["Value"] as int?)
                .Enable(!(bool)ViewData["IsHiddenPersonalData"]))
    
          if (Model.IsMandatory)
            {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("Int").Replace(".", "_"))' value='@ViewData["DefaultValue"]' />                
            }

        }
        break;
    case bv.model.Model.Core.EditorType.Lookup:
        //if cbox is a master of other value, insert additional hiddens and client event
        //if cbox is a dependant of other value, add load event handler
            if (Model.IsMandatory)
            {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("Lookup").Replace(".", "_"))' value='@ViewData["DefaultValue"]' />                
            }
            var specificType = GetCurrentType();
            if (Model.IsMultiple)
            {
                @*Html.ListBox(GetControlName("Lookup"), ViewData["LookupList"] as IEnumerable<SelectListItem>);*@
                <div class="scrollable">
                    @foreach(SelectListItem i in  ViewData["LookupList"] as IEnumerable<SelectListItem>)
                    {
                        <input type="checkbox" id="@i.Value" value="@i.Value" name='@GetControlName("LookupMultiple")'/>
                        @Html.Label(i.Text)
                        <br />
                    }
                </div>
            }
            else
            {
                if (specificType == CBoxEditorType.Normal)
                {
                    @(Html.Telerik().ComboBox()
                               .Name(GetControlName("Lookup"))
                               .BindTo(ViewData["LookupList"] as IEnumerable<SelectListItem>)
                               .SelectedIndex(GetSelectedIndex())
                               .ClientEvents(events =>
                               {
                                   events.OnChange("CheckValue");
                               })
                               .HtmlAttributes(Model.IsMandatory ? new { @class = "spComboBox requiredField" } : new { @class = "spComboBox" })
                               .Enable(!(bool)ViewData["IsHiddenPersonalData"]))                               
                }
                else
                {
                    if (specificType == CBoxEditorType.Master)
                    {

                        @(Html.Telerik().ComboBox()
                                   .Name(GetControlName("Lookup"))
                                   .AutoFill(true)
                                   .DataBinding(binding => binding.Ajax().Select("GetLookupSourceNew", "Search", new { modelGuid = ViewData["ModelGuid"], fieldName = Model.Name, initValue = ViewData["Value"] }))
                                   .HighlightFirstMatch(true)
                                   .HtmlAttributes(Model.IsMandatory ? new { @class = "spComboBox requiredField" } : new { @class = "spComboBox" })
                                   .ClientEvents(events =>
                                   {
                                       events.OnChange("OnComboboxMasterChange");
                                       events.OnLoad("OnComboboxSlaveLoad");
                                   })
                                   .Enable(!(bool)ViewData["IsHiddenPersonalData"])
                              )
                        @InsertAdjavantHiddens()
                    }
                    else
                    {                        
                        @(Html.Telerik().ComboBox()
                                   .Name(GetControlName("Lookup"))
                                   .AutoFill(true)
                                   .DataBinding(binding => binding.Ajax().Select("GetLookupSourceNew", "Search", new { modelGuid = ViewData["ModelGuid"], fieldName = Model.Name }))
                                   .HtmlAttributes(Model.IsMandatory ? new { @class = "spComboBox requiredField" } : new { @class = "spComboBox" })
                                   .HighlightFirstMatch(true)
                                   .ClientEvents(events =>
                                   {
                                       events.OnChange("CheckValue");
                                       events.OnLoad("OnComboboxSlaveLoad");
                                   })
                                   .Enable(!(bool)ViewData["IsHiddenPersonalData"])
                              )
                    }
                }
            }
            break;
    case bv.model.Model.Core.EditorType.Text:
            {
                var htmlAttributes = new Dictionary<string, object>();
                var className = Model.IsMandatory ? "spTextBox requiredField" : "spTextBox";
                htmlAttributes.Add("class", className);
                htmlAttributes.Add("maxlength", "100");
                if ((bool)ViewData["IsHiddenPersonalData"])
                {
                    <div class='spTextBoxContainer'>
                        <input type="text" class="spTextBox readonlyField" disabled="disabled"/>
                    </div>
                }
                else
                {
                    <div class='spTextBoxContainer'>
                        @(Html.TextBox(GetControlName("String"), ViewData["Value"], htmlAttributes))                    
                    </div>
                      
                    if (Model.IsMandatory)
                    {
                <input type="hidden" id='@String.Format("Default{0}", GetControlName("String").Replace(".", "_"))' value='@ViewData["DefaultValue"]' />                
                    }
                }            
            break;
        }
}
