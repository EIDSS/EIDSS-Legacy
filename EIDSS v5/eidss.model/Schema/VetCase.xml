<?xml version="1.0" encoding="utf-8" ?>
<object name="VetCase"
        connection="EidssConnectionString"
        generator="ObjectGenerator.xslt"
        xmlns="urn:schemas-bv:objectmodel">

    <storage>
        <get name="spVetCase_SelectDetail" />
    </storage>

    <tables>
        <table name="VetCase" hacodable="true">
            <properties auditObject="daoVetCase" auditTable="tlbVetCase" newEvent="NewVetCase" permissionObject="VetCase"
                   changeCaseDiseaseEvent="idfsFinalDiagnosis,idfsTentativeDiagnosis2,idfsTentativeDiagnosis1,idfsTentativeDiagnosis" 
                   changeCaseStatusEvent="idfsCaseProgressStatus" />
          <help web="web_vetcaselivestockdetailform"/>
          <labels>
            <item name="idfsTentativeDiagnosis" labelId="VetCase.TentativeDiagnosis1"/>
            <item name="idfsTentativeDiagnosis1" labelId="VetCase.TentativeDiagnosis2"/>
            <item name="idfsTentativeDiagnosis2" labelId="VetCase.TentativeDiagnosis3"/>
            <item name="idfsFinalDiagnosis" labelId="VetCase.FinalDiagnogis"/>
            <item name="strSampleNotes" labelId="VetCase.strSampleNotes"/>
          </labels>
            <fields>              
              <calculated name="strDiagnosis" type="string" depends="idfsFinalDiagnosis,idfsTentativeDiagnosis2,idfsTentativeDiagnosis1,idfsTentativeDiagnosis"
                            lambda='c => String.Format("{0}{1}{2}{3}", 
                              (c.FinalDiagnosis == null) ? "" : c.FinalDiagnosis.name,
                              (c.TentativeDiagnosis2 == null) ? "" : ((c.FinalDiagnosis == null) ? "" : ", ") + c.TentativeDiagnosis2.name,
                              (c.TentativeDiagnosis1 == null) ? "" : ((c.FinalDiagnosis == null &amp;&amp; c.TentativeDiagnosis2 == null) ? "" : ", ")  + c.TentativeDiagnosis1.name,
                              (c.TentativeDiagnosis == null) ? "" : ((c.FinalDiagnosis == null &amp;&amp; c.TentativeDiagnosis2 == null &amp;&amp; c.TentativeDiagnosis1 == null) ? "" : ", ")  + c.TentativeDiagnosis.name
                               )' />
               
              <calculated name="DiagnosisAll" type="List&lt;DiagnosisLookup&gt;" 
                            depends="idfsFinalDiagnosis,idfsTentativeDiagnosis2,idfsTentativeDiagnosis1,idfsTentativeDiagnosis"
                            lambda='c => new List&lt;DiagnosisLookup&gt;(new []
                                    { c.FinalDiagnosis, c.TentativeDiagnosis2, c.TentativeDiagnosis1, c.TentativeDiagnosis }
                                    .Where(d => d != null).Distinct())'/>
              <calculated name="strDiseaseNames" type="string" 
                            depends="DiagnosisAll"
                            lambda='c => c.DiagnosisAll.Aggregate("", 
                                    (a,b) => (a == "" ? "" : a + ", ") 
                                    + b.name + (String.IsNullOrEmpty(b.strOIECode) ? "" : "(" + b.strOIECode + ")"))' />
              <calculated name="IsClosed" type="bool" depends="idfsCaseProgressStatus" dependonpost="yes"
                            lambda="c => (c.idfsCaseProgressStatus == (long)CaseStatusEnum.Closed) &amp;&amp; !c.IsDirty" />
              <calculated name="idfsDiagnosis" type="long?" depends="idfsFinalDiagnosis,idfsTentativeDiagnosis2,idfsTentativeDiagnosis1,idfsTentativeDiagnosis"
                          lambda="c=>
                                  c.idfsFinalDiagnosis.HasValue ? c.idfsFinalDiagnosis :
                                    c.idfsTentativeDiagnosis2.HasValue ? c.idfsTentativeDiagnosis2 :
                                      c.idfsTentativeDiagnosis1.HasValue ? c.idfsTentativeDiagnosis1 :
                                        c.idfsTentativeDiagnosis.HasValue ? c.idfsTentativeDiagnosis : null"/>
              <calculated name="strSiteCode" type="string" depends="" lambda="c => EidssSiteContext.Instance.SiteCode" />
              <calculated name="strIdfsDiagnosis" type="string" depends="idfsFinalDiagnosis,idfsTentativeDiagnosis"
                          lambda="c=> c.idfsFinalDiagnosis.HasValue ? c.idfsFinalDiagnosis.ToString() :                                    
                                        c.idfsTentativeDiagnosis.HasValue ? c.idfsTentativeDiagnosis.ToString() : null"/>
              <calculated name="strReadOnlyEnteredDate" type="string" depends="datEnteredDate" lambda='c => c.datEnteredDate == null ? (string)null : c.datEnteredDate.Value.ToString()'/>
              <calculated name="buttonSelectFarm" type="string" depends="Farm" lambda='c=> ""'/>
              <calculated name="buttonCoordinatesPicker" type="string" depends="Farm" lambda='c => ""'/>
                <!--calculated name="blnEnableTestsConductedCalc" type="bool" depends="" 
                            lambda="c => c.CaseTests == null || c.CaseTests.Where(i => !i.IsMarkedToDelete &amp;&amp; i.idfsTestStatus == (long)BatchStatusEnum.Completed).Count() == 0"/>
                <calculated name="TestsConductedCalc" type="BaseReference" depends=""
                            lambda="c => (c.blnEnableTestsConductedCalc || c.TestsConductedLookup == null) ? c.TestsConducted : c.TestsConductedLookup.Where(i => i.idfsBaseReference == (long)YesNoUnknownValuesEnum.Yes).SingleOrDefault()"/-->
            </fields>
          
            <readonly>
              <fields name="idfsCaseProgressStatus,CaseProgressStatus" predicate="c => c.ReadOnly" />
              <fields name="strReadOnlyEnteredDate" predicate="c => true" />
              <fields name="strSiteCode,strMonitoringSessionID,idfParentMonitoringSession" predicate="c => true" />
              <fields name="idfsCaseType,CaseType,datEnteredDate,strCaseID,strDiseaseNames,strDiagnosis,idfPersonEnteredBy,idfsSite,strPersonEnteredByName,strTentativeDiagnosisOIECode, strTentativeDiagnosis1OIECode,strTentativeDiagnosis2OIECode,strFinalDiagnosisOIECode" predicate="c => true" />
              <fields name="strInvestigatedByOffice,strReportedByOffice,strPersonInvestigatedBy,strPersonReportedBy" predicate="c => true" />
              <fields name="PersonInvestigatedBy,idfPersonInvestigatedBy" predicate="c => c.IsClosed || c.ReadOnly || c.idfInvestigatedByOffice == null" />
              <fields name="TestsConducted,idfsYNTestsConducted" predicate="c => c.IsClosed || c.ReadOnly || (c.blnEnableTestsConducted != null &amp;&amp; !c.blnEnableTestsConducted.Value)" />
              <fields name="CaseTests,CaseTestValidations" predicate='c => c.IsClosed || c.ReadOnly || (c.TestsConducted != null &amp;&amp; c.idfsYNTestsConducted == (long)YesNoUnknownValuesEnum.No)'/>
              <fields name='idfsCaseReportType, CaseReportType' predicate='c => c.IsClosed || c.ReadOnly || c.idfParentMonitoringSession.HasValue'/>
              <fields name='buttonSelectFarm,buttonCoordinatesPicker' predicate='c => c.IsClosed || c.ReadOnly'/>
              <fields name="*" predicate="c => c.ReadOnly || c.IsClosed" />
            </readonly>
          <personaldata>
            <group name="Vet_Farm_Settlement">
              <item name="Vet_Farm"/>
              <item name="Farm.strOwnerLastName"/>
              <item name="Farm.strOwnerFirstName"/>
              <item name="Farm.strOwnerMiddleName"/>
              <item name="Farm.strFarmCode"/>
              <item name="Farm.strNationalName"/>
              <item name="Farm.Address.Settlement"/>
              <item name="Farm.Address.idfsSettlement"/>
              <item name="Farm.Address.PostCode"/>
              <item name="Farm.Address.Street"/>
              <item name="Farm.Address.strPostCode"/>
              <item name="Farm.Address.strStreetName"/>
              <item name="Farm.Address.strApartment"/>
              <item name="Farm.Address.strHouse"/>
              <item name="Farm.Address.strBuilding"/>
              <item name="Farm.strFax"/>
              <item name="Farm.strEmail"/>
              <item name="Farm.strContactPhone"/>              
            </group>
            <group name="Vet_Farm_Details">
              <item name="Vet_Farm"/>
              <item name="Farm.strOwnerLastName"/>
              <item name="Farm.strOwnerFirstName"/>
              <item name="Farm.strOwnerMiddleName"/>
              <item name="Farm.strFarmCode"/>
              <item name="Farm.strNationalName"/>
              <item name="Farm.Address.PostCode"/>
              <item name="Farm.Address.Street"/>
              <item name="Farm.Address.strPostCode"/>
              <item name="Farm.Address.strStreetName"/>
              <item name="Farm.Address.strApartment"/>
              <item name="Farm.Address.strHouse"/>
              <item name="Farm.Address.strBuilding"/>
              <item name="Farm.strFax"/>
              <item name="Farm.strEmail"/>
              <item name="Farm.strContactPhone"/>
            </group>
            <group name="Vet_Farm_Coordinates">
              <item name="Farm.Location.dblLatitude"/>
              <item name="Farm.Location.dblLongitude"/>              
            </group>
          </personaldata>
            <relations>
              <relation name="FFPresenterControlMeasures" table="FFPresenterModel" internal="false" type="link" source="idfObservation" target="CurrentObservation" lazy="false" />              
              <relation name="Farm" table="FarmPanel" internal="false" type="link" source="idfFarm" target="idfFarm" hacodable="true" />
              <relation name="Vaccination" table="VaccinationListItem" internal="false" type="child" lazy="false" source="idfCase" target="" hacodable="true" />
              <relation name="CaseTests" table="CaseTest" internal="false" type="child" lazy="false" source="idfCase" target="" />
              <relation name="CaseTestValidations" table="CaseTestValidation" internal="false" type="child" lazy="false" source="idfCase" target="" />
              <relation name="PensideTests" table="PensideTest" internal="false" type="child" lazy="false" source="idfCase" target="" />
              <relation name="AnimalList" table="AnimalListItem" internal="false" type="child" lazy="true" source="idfCase" target="idfCase" hacodable="true"/>
              <relation name="Samples" table="VetCaseSample" internal="false" type="child" lazy="false" source="idfCase" target="idfCase" />                            
            </relations>
            <lookups>
              <lookup name="CaseReportType" table="BaseReference" section="rftCaseReportType" source="idfsCaseReportType" target="idfsBaseReference"/>
              <lookup name="CaseType" table="BaseReference" section="rftCaseType" source="idfsCaseType" target="idfsBaseReference" />
              <lookup name="CaseStatus" table="BaseReference" section="rftCaseStatus" source="idfsCaseStatus" target="idfsBaseReference" >
                <filters>
                  <filter predicate="c => c.intHACode.GetValueOrDefault() == 98"/>
                </filters>
              </lookup>                         
              <lookup name="CaseProgressStatus" table="BaseReference" section="rftCaseProgressStatus" source="idfsCaseProgressStatus" target="idfsBaseReference" notaddempty="true" />
              <lookup name="TestsConducted" table="BaseReference" section="rftYesNoValue" source="idfsYNTestsConducted" target="idfsBaseReference" />
              <lookup name="TentativeDiagnosis" table="DiagnosisLookup" source="idfsTentativeDiagnosis" target="idfsDiagnosis">
                <filters>
                  <filter predicate="c => ((c.intHACode &amp; (int)obj._HACode) != 0) || c.idfsDiagnosis == obj.idfsTentativeDiagnosis" />
                  <filter predicate="c => (c.idfsUsingType == (long)DiagnosisUsingTypeEnum.StandardCase) || c.idfsDiagnosis == obj.idfsTentativeDiagnosis" />
                </filters>
              </lookup>
              <lookup name="TentativeDiagnosis1" table="DiagnosisLookup" source="idfsTentativeDiagnosis1" target="idfsDiagnosis">
                <filters>
                  <filter predicate="c => ((c.intHACode &amp; (int)obj._HACode) != 0) || c.idfsDiagnosis == obj.idfsTentativeDiagnosis1" />
                  <filter predicate="c => (c.idfsUsingType == (long)DiagnosisUsingTypeEnum.StandardCase) || c.idfsDiagnosis == obj.idfsTentativeDiagnosis1" />
                </filters>
              </lookup>
              <lookup name="TentativeDiagnosis2" table="DiagnosisLookup" source="idfsTentativeDiagnosis2" target="idfsDiagnosis">
                <filters>
                  <filter predicate="c => ((c.intHACode &amp; (int)obj._HACode) != 0) || c.idfsDiagnosis == obj.idfsTentativeDiagnosis2" />
                  <filter predicate="c => (c.idfsUsingType == (long)DiagnosisUsingTypeEnum.StandardCase) || c.idfsDiagnosis == obj.idfsTentativeDiagnosis2" />
                </filters>
              </lookup>              
              <lookup name="FinalDiagnosis" table="DiagnosisLookup" source="idfsFinalDiagnosis" target="idfsDiagnosis">
                <filters>
                  <filter predicate="c => ((c.intHACode &amp; (int)obj._HACode) != 0) || c.idfsDiagnosis == obj.idfsFinalDiagnosis" />
                  <filter predicate="c => (c.idfsUsingType == (long)DiagnosisUsingTypeEnum.StandardCase) || c.idfsDiagnosis == obj.idfsFinalDiagnosis" />
                </filters>
              </lookup>
              <lookup name="ShowDiagnosis" table="DiagnosisLookup" source="idfsShowDiagnosis" target="idfsDiagnosis">
                <filters>
                  <filter predicate="c => ((c.intHACode &amp; (int)obj._HACode) != 0) || c.idfsDiagnosis == obj.idfsShowDiagnosis" />
                  <filter predicate="c => (c.idfsUsingType == (long)DiagnosisUsingTypeEnum.StandardCase) || c.idfsDiagnosis == obj.idfsShowDiagnosis" />
                </filters>
              </lookup>
              <lookup name="PersonInvestigatedBy" table="WiderPersonLookup" source="idfPersonInvestigatedBy" target="idfPerson">
                  <params>
                      <param name="OfficeID" lambda="c => c.idfInvestigatedByOffice ?? 0" type="long" />
                      <param name="ID" const="null" />
                  </params>
              </lookup>
            </lookups>
            <storage>
                <post />
                <delete />
                <candelete />
            </storage>
            <postorder>
              <item name="Farm" />
              <item name="this" />
              <item name="Vaccination"/>
              <item name="AnimalList"/>
              <item name="Samples"/>
              <item name="CaseTests"/>
              <item name="PensideTests"/>
              <item name="CaseTestValidations"/>                     
              <item name="FFPresenterControlMeasures" />
            </postorder>
            <deleteorder>
              <!--item name="Farm" /-->              
              <item name="FFPresenterControlMeasures" />
              <item name="CaseTests"/>
              <item name="this" />
            </deleteorder>
            <extenders>
              <creating>
                <lambda_extender target="idfsCaseType" type="long" lambda='c => (HACode == (int)eidss.model.Enums.HACode.Livestock ? (long)CaseTypeEnum.Livestock : (long)CaseTypeEnum.Avian)' />
                <scalar_extender target="idfCase" class="GetNewIDExtender" />
                <lambda_extender target="strCaseID" type="string" lambda='c => "(new)"' />
                <scalar_extender target="idfObservation" class="GetNewIDExtender" />
                <scalar_extender target="idfsSite" class="GetSiteIDExtender" />
                <lambda_extender target="datEnteredDate" type="DateTime" lambda="c => DateTime.Now" />
                <lambda_extender target="Farm" type="FarmPanel" lambda="c => FarmAccessor.CreateByCase(manager, c, c)" />
                <lambda_extender target="idfFarm" type="long" lambda="c => c.Farm.idfFarm"/>
                <custom_extender>
                  <text>
                    obj.Farm._HACode = obj._HACode;
                    if (EidssUserContext.Instance != null)
                    if (EidssUserContext.User != null)
                    {
                    obj.strPersonEnteredByName = EidssUserContext.User.FullName;
                    if (EidssUserContext.User.EmployeeID != null)
                    {
                    long em;
                    if (long.TryParse(EidssUserContext.User.EmployeeID.ToString(), out em))
                    obj.idfPersonEnteredBy = em;
                    }
                    }
                    if (HACode.Value == (int)eidss.model.Enums.HACode.Livestock)
                    {
                    obj.FFPresenterControlMeasures = FFPresenterModel.Accessor.Instance(null).SelectByKey(manager, obj.idfObservation);
                    obj.FFPresenterControlMeasures.SetProperties(EidssSiteContext.Instance.CountryID, null, FFTypeEnum.LivestockControlMeasures, obj.idfObservation.Value);
                    if (obj.FFPresenterControlMeasures.CurrentTemplate != null)
                    {
                    obj.idfsFormTemplate = obj.FFPresenterControlMeasures.CurrentTemplate.idfsFormTemplate;
                    }
                    }

                  </text>
                </custom_extender>
              </creating>
              <created>
                  <select_extender class="SelectLookupExtender" target="CaseProgressStatus" table="BaseReference" source="CaseProgressStatusLookup" lambda='c => c.idfsBaseReference == (long)CaseStatusEnum.InProgress' />                    
              </created>
              <loading>
                <lambda_extender target="_HACode" type="int?" lambda='c => (c.idfsCaseType == (long)CaseTypeEnum.Livestock ? 32 : 64)' />
                <lambda_extender target="Farm" type="FarmPanel" lambda="c=> c.Farm ?? FarmAccessor.CreateByCase(manager, c, c)"/>
                <lambda_extender target="Farm.Case" type="WeakReference" lambda="c => new WeakReference(c)"/>
                <lambda_list_extender list="Farm.FarmTree" type="WeakReference" target="Case" lambda="c => c.Farm.Case"/>
                <lambda_extender target="idfFarm" type="long" lambda="c => c.Farm.idfFarm"/>
              </loading>
              <loaded>
                <lambda_extender target="TestsConducted" type="BaseReference"
                                 lambda="c => (c.blnEnableTestsConducted == null || c.blnEnableTestsConducted.Value || c.TestsConductedLookup == null) ? c.TestsConducted : c.TestsConductedLookup.Where(i => i.idfsBaseReference == (long)YesNoUnknownValuesEnum.Yes).SingleOrDefault()"/>
                <!--prnt lambda_list_extender list="CaseTestValidations" type="long?" target="idfsCaseType" lambda="c => c.idfsCaseType"/-->
                <!--prnt lambda_list_extender list="CaseTests" type="EditableList&lt;VetCaseSample&gt;" target="VetCaseSamples" lambda="c => c.Samples"/>
                <lambda_list_extender list="CaseTests" type="EditableList&lt;CaseTestValidation&gt;" target="CaseTestValidations" lambda="c => c.CaseTestValidations"/-->
                <lambda_list_extender list="Samples" type="int?" target="_HACode" lambda="c => c._HACode"/>
                <lambda_list_extender list="CaseTests" type="long" target="idfTesting" lambda="c => { (t.GetAccessor() as CaseTest.Accessor).LoadLookup_TestTypeRef(manager, t); return t.idfTesting; }"/>
                <!--prnt lambda_list_extender list="Samples" type="long?" target="idfsFinalDiagnosisFromCase" lambda="c => c.idfsFinalDiagnosis"/>
                <lambda_list_extender list="Samples" type="long?" target="idfsTentativeDiagnosis2FromCase" lambda="c => c.idfsTentativeDiagnosis2"/>
                <lambda_list_extender list="Samples" type="long?" target="idfsTentativeDiagnosis1FromCase" lambda="c => c.idfsTentativeDiagnosis1"/>
                <lambda_list_extender list="Samples" type="long?" target="idfsTentativeDiagnosisFromCase" lambda="c => c.idfsTentativeDiagnosis"/>
                <lambda_list_extender list="Samples" type="EditableList&lt;AnimalListItem&gt;" target="AnimalListFromCase" lambda="c => c.AnimalList"/>
                <lambda_list_extender list="Samples" type="List&lt;VetFarmTree&gt;" target="VetFarmTreeFromCase" lambda="c => c.Farm.FarmTree.Where(a => a.idfsPartyType == (long)PartyTypeEnum.Species).ToList()"/>
                <lambda_list_extender list="Samples" type="EditableList&lt;CaseTest&gt;" target="CaseTests" lambda="c => c.CaseTests"/>
                <lambda_list_extender list="Samples" type="EditableList&lt;PensideTest&gt;" target="PensideTests" lambda="c => c.PensideTests"/-->
                <lambda_list_extender list="PensideTests" type="int?" target="_HACode" lambda="c => c._HACode"/>
                <!--prnt lambda_list_extender list="PensideTests" type="EditableList&lt;VetCaseSample&gt;" target="SamplesFromCase" lambda="c => c.Samples"/-->
                <lambda_list_extender list="PensideTests" type="string" target="strDummy" lambda='c => ""'/>
                <custom_extender>
                  <text>
                    if (obj.Vaccination.Count() > 0)
                    {
                        foreach (var ft in obj.Farm.FarmTree.Where(c => c.idfsPartyType == (long)PartyTypeEnum.Species))
                        {
                            foreach(var vac in obj.Vaccination.Where(v=>v.idfSpecies == ft.idfParty))
                            vac.strSpecies = String.Format("{0}/{1}", ft.strHerdName, ft.strSpeciesName );
                        }
                    }                    
                  </text>                  
                </custom_extender>
                <custom_extender>
                  <text>
                    if (obj.idfsFormTemplate.HasValue)
                    {
                    obj.FFPresenterControlMeasures.SetProperties(obj.idfsFormTemplate.Value);
                    obj.FFPresenterControlMeasures.ReadOnly = obj.IsClosed;
                    }
                    else
                    {
                    if (obj._HACode.Value == (int)eidss.model.Enums.HACode.Livestock)
                    {
                    if (obj.idfObservation == null)
                    obj.idfObservation = (new GetNewIDExtender&lt;VetCase&gt;()).GetScalar(manager, obj);
                    obj.FFPresenterControlMeasures = FFPresenterModel.Accessor.Instance(null).SelectByKey(manager, obj.idfObservation);
                    obj.FFPresenterControlMeasures.SetProperties(EidssSiteContext.Instance.CountryID, null, FFTypeEnum.LivestockControlMeasures, obj.idfObservation.Value);
                    if (obj.FFPresenterControlMeasures.CurrentTemplate != null) obj.idfsFormTemplate = obj.FFPresenterControlMeasures.CurrentTemplate.idfsFormTemplate;
                    }
                    }

                  </text>
                </custom_extender>
              </loaded>
              <posting>
                    <db_lambda_extender target="strCaseID" type="string" lambda='(c,m) => 
                        c.strCaseID != "(new)" 
                        ? c.strCaseID 
                        : m.SetSpCommand("dbo.spGetNextNumber", (long)NumberingObjectEnum.VetCase, DBNull.Value, DBNull.Value)                        
                        .ExecuteScalar&lt;string&gt;(ScalarSourceType.OutputParameter, "NextNumberValue")' />
                    <lambda_extender target='idfsShowDiagnosis' lambda='c=>c.idfsDiagnosis' type='long?'/>
                </posting>
              <posted>
                <custom_extender>
                  <text>
                    if (obj.AnimalList.Count() > 0)
                    {
                    obj.AnimalList.ForEach(animal => animal.CopyMainProperties(obj.Farm.FarmTree.Single(species=>species.idfParty == animal.idfSpecies)));
                    }
                  </text>
                </custom_extender>
              </posted>
            </extenders>
            <handlers>
                <fieldhandler>
                  <scalar_handler class="SetNowHandler" target="datTentativeDiagnosisDate" field="idfsTentativeDiagnosis" lambda="null" />
                  <scalar_handler class="SetNowHandler" target="datTentativeDiagnosis1Date" field="idfsTentativeDiagnosis1" lambda="null" />
                  <scalar_handler class="SetNowHandler" target="datTentativeDiagnosis2Date" field="idfsTentativeDiagnosis2" lambda="null" />
                  <scalar_handler class="SetNowHandler" target="datFinalDiagnosisDate" field="idfsFinalDiagnosis" lambda="null" />
                  <scalar_handler class="SetScalarHandler" target="PersonInvestigatedBy" field="idfInvestigatedByOffice" lambda="(o, fld, prev_fld) => null" />
                  <value_handler field="idfsTentativeDiagnosis" target="strTentativeDiagnosisOIECode" value='(obj.TentativeDiagnosis == null) ? "" : obj.TentativeDiagnosis.strOIECode'/>
                  <value_handler field="idfsTentativeDiagnosis1" target="strTentativeDiagnosis1OIECode" value='(obj.TentativeDiagnosis1 == null) ? "" : obj.TentativeDiagnosis1.strOIECode'/>
                  <value_handler field="idfsTentativeDiagnosis2" target="strTentativeDiagnosis2OIECode" value='(obj.TentativeDiagnosis2 == null) ? "" : obj.TentativeDiagnosis2.strOIECode'/>
                  <value_handler field="idfsFinalDiagnosis" target="strFinalDiagnosisOIECode" value='(obj.FinalDiagnosis == null) ? "" : obj.FinalDiagnosis.strOIECode'/>
                  <custom_handler field='idfsDiagnosis'>
                     <text>
                       if (obj.idfsDiagnosis.HasValue)
                       {
                          obj.SetNewFFTemplatesValues();
                       }
                     </text>
                  </custom_handler>                  
                  <!--prnt lambda_list_handler field="idfsFinalDiagnosis" list="Samples" type="long?" target="idfsFinalDiagnosisFromCase" lambda="c => c.idfsFinalDiagnosis"/>
                  <lambda_list_handler field="idfsTentativeDiagnosis2" list="Samples" type="long?" target="idfsTentativeDiagnosis2FromCase" lambda="c => c.idfsTentativeDiagnosis2"/>
                  <lambda_list_handler field="idfsTentativeDiagnosis1" list="Samples" type="long?" target="idfsTentativeDiagnosis1FromCase" lambda="c => c.idfsTentativeDiagnosis1"/>
                  <lambda_list_handler field="idfsTentativeDiagnosis" list="Samples" type="long?" target="idfsTentativeDiagnosisFromCase" lambda="c => c.idfsTentativeDiagnosis"/-->
                  <lookup_handler lookup="PersonInvestigatedBy" field="idfInvestigatedByOffice" />
                </fieldhandler>
              <childaddlist>
                <lambda_handler container="CaseTests" field="" filter="c => true" target="TestsConducted" type="BaseReference"
                                lambda="c => (c.CaseTests.Count(i => !i.IsMarkedToDelete) == 0) ? c.TestsConducted : c.TestsConductedLookup.Where(i => i.idfsBaseReference == (long)YesNoUnknownValuesEnum.Yes).SingleOrDefault()"/>
              </childaddlist>
            </handlers>
            <validators>
                <post>
                  <!--base location is mandatory-->
                  <required_validator target="Farm.Address.idfsCountry" property="Farm.Address.Country" />
                  <required_validator target="Farm.Address.idfsRegion" property="Farm.Address.Region"/>
                  <required_validator target="Farm.Address.idfsRayon" property="Farm.Address.Rayon"/>
                  <required_validator target="idfsCaseReportType" property="CaseReportType"/>
                  <required_validator target="idfsCaseProgressStatus" property="CaseProgressStatus"/>

                 <custom_mandatory_validator name="CaseType" fieldId="VetCase_CaseClassification"/>
                  <custom_mandatory_validator name="Farm.Address.Settlement" fieldId="VetCase_Farm_Address_Settlement"/>
                  <custom_mandatory_validator name="TentativeDiagnosis" fieldId="VetCase_TentativeDiagnosis"/>
                  <custom_mandatory_validator name="TentativeDiagnosis1" fieldId="VetCase_Tentative1Diagnosis"/>
                  <custom_mandatory_validator name="TentativeDiagnosis2" fieldId="VetCase_Tentative2Diagnosis"/>
                  <custom_mandatory_validator name="FinalDiagnosis" fieldId="VetCase_FinalDiagnosis"/>
                  <custom_mandatory_validator name="datTentativeDiagnosisDate" fieldId="VetCase_TentativeDiagnosisDate"/>
                  <custom_mandatory_validator name="datTentativeDiagnosis1Date" fieldId="VetCase_TentativeDiagnosis1Date"/>
                  <custom_mandatory_validator name="datTentativeDiagnosis2Date" fieldId="VetCase_TentativeDiagnosis2Date"/>
                  <custom_mandatory_validator name="datFinalDiagnosisDate" fieldId="VetCase_FinalDiagnosisDate"/>
                  <custom_mandatory_validator name="Farm.strOwnerLastName" fieldId="VetCase_Farm_FarmOwnerLastName"/>
                  <custom_mandatory_validator name="Farm.strOwnerFirstName" fieldId="VetCase_Farm_FarmOwnerFirstName"/>
                  <custom_mandatory_validator name="Farm.strNationalName" fieldId="VetCase_Farm_FarmName"/>
                  <custom_mandatory_validator name="idfReportedByOffice" fieldId="VetCase_ReportedByOffice"/>
                  <custom_mandatory_validator name="idfPersonReportedBy" fieldId="VetCase_PersonReportedBy"/>
                   
                  <!-- current dates rules-->                  
                  
                  <predicate_validator field="datTentativeDiagnosisDate"   message="datTentativeDiagnosisDate_CurrentDate_msgId"
                                       predicate="c => c.datTentativeDiagnosisDate == null 
                                            || c.datTentativeDiagnosisDate &lt;= DateTime.Now"
                    />
                  <predicate_validator field="datTentativeDiagnosis1Date" message="datTentativeDiagnosis1Date_CurrentDate_msgId"
                                       predicate="c => c.datTentativeDiagnosis1Date == null 
                                            || c.datTentativeDiagnosis1Date &lt;= DateTime.Now"
                      />
                  <predicate_validator field="datTentativeDiagnosis2Date" message="datTentativeDiagnosis2Date_CurrentDate_msgId"
                                       predicate="c => c.datTentativeDiagnosis2Date == null 
                                            || c.datTentativeDiagnosis2Date &lt;= DateTime.Now"
                      />
                  <predicate_validator field="datInvestigationDate" message="datInvestigationDate_CurrentDate_msgId"
                                       predicate="c => c.datInvestigationDate == null 
                                            || c.datInvestigationDate &lt;= DateTime.Now"
                      />
                  <predicate_validator field="datAssignedDate" message="datAssignedDate_CurrentDate_msgId"
                                       predicate="c => c.datAssignedDate == null 
                                            || c.datAssignedDate &lt;= DateTime.Now"
                      />
                  <predicate_validator field="datReportDate" message="datReportDate_CurrentDate_msgId"
                                       predicate="c => c.datReportDate == null 
                                            || c.datReportDate &lt;= DateTime.Now"
                      />                  
                  <!-- interdendence of dates -->

                  <predicate_validator field="datTentativeDiagnosis2Date" message="datTentativeDiagnosis2Date_datTentativeDiagnosis1Date_msgId"
                     predicate="c => c.datTentativeDiagnosis2Date == null || c.datTentativeDiagnosis1Date == null
                                            || c.datTentativeDiagnosis2Date &gt;= c.datTentativeDiagnosis1Date "
                      />
                  <predicate_validator field="datTentativeDiagnosis2Date" message="datTentativeDiagnosis2Date_datTentativeDiagnosisDate_msgId"
                     predicate="c => c.datTentativeDiagnosis2Date == null || c.datTentativeDiagnosisDate == null
                                            || c.datTentativeDiagnosis2Date &gt;= c.datTentativeDiagnosisDate"
                      />
                  <predicate_validator field="datTentativeDiagnosis2Date" message="datAssignedDate_TentantiveDiagnosis2Date_msgId"
                     predicate="c => c.datTentativeDiagnosis2Date == null || c.datAssignedDate == null
                                            || c.datTentativeDiagnosis2Date &gt;= c.datAssignedDate"
                      />
                  <predicate_validator field="datTentativeDiagnosis2Date" message="datReportedDate_TentantiveDiagnosis2Date_msgId"
                     predicate="c => c.datTentativeDiagnosis2Date == null || c.datReportDate == null
                                            || c.datTentativeDiagnosis2Date &gt;= c.datReportDate"
                      />

                  <predicate_validator field="datTentativeDiagnosis1Date" message="datTentativeDiagnosisDate_datTentativeDiagnosis2Date_msgId"
                     predicate="c => c.datTentativeDiagnosis1Date == null || c.datTentativeDiagnosisDate == null
                                            || c.datTentativeDiagnosis1Date &gt;= c.datTentativeDiagnosisDate"
                      />
                  <predicate_validator field="datTentativeDiagnosis1Date" message="datAssignedDate_TentantiveDiagnosis1Date_msgId"
                     predicate="c => c.datTentativeDiagnosis1Date == null  || c.datAssignedDate == null
                                            || c.datTentativeDiagnosis1Date &gt;= c.datAssignedDate"
                      />
                  <predicate_validator field="datTentativeDiagnosis1Date" message="datReportedDate_TentantiveDiagnosis1Date_msgId"
                     predicate="c => c.datTentativeDiagnosis1Date == null  || c.datReportDate == null
                                            || c.datTentativeDiagnosis1Date &gt;= c.datReportDate"
                      />
                  
                  <predicate_validator field="datTentativeDiagnosisDate"   message="datAssignedDate_TentantiveDiagnosisDate_msgId"
                     predicate="c => c.datTentativeDiagnosisDate == null || c.datAssignedDate == null
                                            || c.datTentativeDiagnosisDate &gt;= c.datAssignedDate"
                    />

                  <predicate_validator field="datTentativeDiagnosisDate"   message="datReportedDate_TentantiveDiagnosisDate_msgId"
                      predicate="c => c.datTentativeDiagnosisDate == null  || c.datReportDate == null
                                            || c.datTentativeDiagnosisDate &gt;= c.datReportDate"
                    />
                  
                  <predicate_validator field="datAssignedDate" message="datAssignedDate_VetCaseDatesRule_msgId"
                                       predicate="c => c.datAssignedDate == null  || c.datReportDate == null
                                            || c.datAssignedDate &gt;= c.datReportDate"
                      />

                  <!--<custom_validator method="CustomSampleValidator" />-->
                </post>
            </validators>
            <actions>
              <action name="VetInvestigationReport" type="Action">
                <visual panel="Main" alignment="Left" >
                  <regular caption="titleCaseInvestigationReport" icon="Report" tooltip=""/>
                </visual>
                <run>
                  <preUI webType="JScript"/>
                  <params>
                    <param name="id" type="long"/>
                    <param name="diagnosisId" type="long"/>
                  </params>
                </run>
              </action>
            </actions>
        </table>
    </tables>

</object>
